#!/usr/bin/python3

import os
import yaml
import platform
import requests
import click
import sys

from subprocess import Popen
from shlex import split


def read_moliorrc():
    conf = {}
    with open(os.path.expanduser("~/.moliorrc"), 'r') as file:
        for line in file.readlines():
            line = line.strip()
            if not line:
                continue
            if "=" not in line:
                continue
            if line[0] == "#":
                continue
            k, v = line.split("=", 2)
            conf[k.strip()] = v.strip()
    return conf


def read_molioryml():
    data = {}
    if os.path.exists('debian/molior.yml'):
        with open('debian/molior.yml', 'r') as file:
            data = yaml.safe_load(file)
    return data


def get_cpu_architecture():
    arch = platform.machine()

    if arch == "x86_64" or arch == "AMD64":
        return "amd64"
    elif arch == "aarch64":
        return "arm64"
    elif arch == "i386":
        return "i386"
    elif arch == "arm":
        if os.uname().machine.startswith("armv7"):
            return "armhf"
    return arch


def get_basemirror(server, project, version):
    url = f"{server}/api2/project/{project}/{version}"
    response = requests.get(url)

    suite = None
    release = None
    if response.status_code == 200:
        json_data = response.json()
        basemirror = json_data["basemirror"]
        if "/" in basemirror:
            suite, release = basemirror.split("/", 2)
    return suite, release


@click.command()
@click.option('-h', '--help', is_flag=True, help="Show help")
@click.option('-d', '--debug', is_flag=True, help="Enable debug mode")
@click.option('-nc', '--no-clean', is_flag=True, help="Do not clean sourcecode before building")
@click.argument('project', required=False, default=None)
@click.argument('version', required=False, default=None)
def main(help, debug, no_clean, project, version):
    """Debian build in a molior docker container.

    PROJECT, VERSION    optional (both together), override the target project \
                        and version from debian/molior.yml
    """

    if help:
        ctx = click.get_current_context()
        click.echo(ctx.get_help())
        ctx.exit()

    arch = get_cpu_architecture()

    if not project or not version:
        m = read_molioryml()
        if "targets" in m:
            for target in m["targets"]:
                project = target
                for v in m["targets"][project]:
                    version = v
                    break
                break

    if not project or not version:
        print("Error: no project/version found in debian/molior.yml or arguments")
        sys.exit(1)

    c = read_moliorrc()
    if 'MOLIOR_URL' not in c:
        print("Error: MOLIOR_URL not found in ~/.moliorrc")
        sys.exit(1)

    suite, release = get_basemirror(c['MOLIOR_URL'], project, version)
    if not suite or not release:
        print(f"Error: project/version {project}/{version} not found on {c['MOLIOR_URL']}")
        sys.exit(1)

    print(f"building for {project}/{version} on {suite}/{release}")
    pwd = os.getcwd()
    cmd = f"docker run -it --rm -v {pwd}:/app/src " \
          "-v /usr/lib/molior-tools/docker-build-local:/usr/local/sbin/docker-build-local " \
          f"{c['MOLIOR_REGISTRY']}/molior-{release}-{arch} " \
          f"docker-build-local {project} {version} {c['MOLIOR_URL']}"

    if debug:
        cmd += " -d"
    if no_clean:
        cmd += " -nc"

    process = Popen(split(cmd))
    process.wait()


if __name__ == "__main__":
    main()
