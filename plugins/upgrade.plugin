# molior-deploy plugin
# vim: syntax=sh

preinit_deployment_upgrade()
{
  REQUIRED_HOST_COMMANDS="apt-ftparchive"
  if [ -n "$DOCKER_COMPOSE_FILE" ]; then
      REQUIRED_HOST_COMMANDS="$REQUIRED_HOST_COMMANDS rdfind"
      REQUIRED_PACKAGES="$REQUIRED_PACKAGES rdfind"
  fi
  REQUIRED_PACKAGES="$REQUIRED_PACKAGES apt-utils"
}

init_deployment_upgrade()
{
  init_deployment_dir
  UPGRADE_BASE=`echo $VARIANT | sed -n 's/^[a-zA-Z0-9-]\+-upgrade-\([a-zA-Z0-9-]\+\)/\1/p'`
  # changing VERSION to contain the base version to be upgraded from
  # this will do a debootstrap and deployment install for the old
  # to be upgraded version
  UPGRADE_VERSION=$VERSION # remember the version to be upgraded to
  VERSION=$UPGRADE_BASE
  if [ -z "$VERSION" ]; then
    log_error "Could not extract project version for upgrading. Please name the deployment configuration file \$VARIANT-upgrade-\$PROJECTVERSION.conf"
  fi

  log "initializing upgradeable deployment for $PROJECT/$VERSION"
  param=""
  if [ $unstable_sources -eq 1 ]; then
    param="?unstable=true"
  fi
  log_info "Getting deployment information ..."
  SOURCESURL=$MOLIOR_SERVER/api2/project/$PROJECT/$VERSION/aptsources
  APT_SOURCES_ORIG=`curl -n -f -s --retry 10 $SOURCESURL$param`
  if [ -z "$APT_SOURCES_ORIG" ]; then
    log_error "Error downloading $SOURCESURL"
  fi
  if [ -z "$DOCKER_UPGRADE_NO_DEDUP" ]; then
    DOCKER_UPGRADE_NO_DEDUP=0
  fi
  APT_SOURCES=`echo "$APT_SOURCES_ORIG" | sed -e '/^#/d' -e '/^$/d'`
  MIRROR=`echo "$APT_SOURCES" | head -n 1 | cut -d' ' -f 2`
  SUITE=`dirname $MIRROR`
  BASEMIRROR=`basename $SUITE`
  REPOURL=`dirname $SUITE`
  SUITE=`basename $SUITE`
  BASEVERSION=`basename $MIRROR`
  log "old mirror: $MIRROR"

  # keep work dir small
  MINIMIZE=1

  # output directory
  mkdir -p $WORK_DIR/upgrade-package
}

postinst_deployment_upgrade()
{
  # write base version / release version
  echo $PROJECT/$UPGRADE_BASE > $WORK_DIR/upgrade-package/baseversion
  echo $REVISION > $WORK_DIR/upgrade-package/releaseversion

  if [ -n "$DOCKER_COMPOSE_FILE" -a "$DOCKER_UPGRADE_NO_DEDUP" -ne 1 ]; then
    # remember pre upgrade docker images
    log_info "Installing $VERSION docker containers ..."
    cp $target/$DOCKER_COMPOSE_FILE $WORK_DIR/docker-compose.yml.old
    oldimages=`grep -v -P '^[ \t]*#' $target/$DOCKER_COMPOSE_FILE | grep "image:" | awk '{ print $2 }' | sort | uniq`
    if [ -f $target/$DOCKER_COMPOSE_ENV_PATH/.env ]; then
        oldimages=`. $target/$DOCKER_COMPOSE_ENV_PATH/.env; for i in $oldimages; do eval echo $i; done`
    fi
    echo "$oldimages" > $WORK_DIR/upgrade-package/docker.old

    echo "$DOCKER_UPGRADE_DEDUP_IGNORE" | sort > $WORK_DIR/upgrade-package/docker.nodedup
    install_docker
  fi

  if type pre_upgrade_deployment >/dev/null; then
    pre_upgrade_deployment
  fi

  log_info "Upgrading $PROJECT $VERSION to $UPGRADE_VERSION ..."


  # restore the version to be upgraded to
  VERSION=$UPGRADE_VERSION

  # reset docker login cache
  docker_login_registires=""

  log "downloading APT sources for $PROJECT/$VERSION"
  param=""
  if [ $unstable_sources -eq 1 ]; then
    param="?unstable=true"
  fi
  log_info "Getting deployment information ..."
  SOURCESURL=$MOLIOR_SERVER/api2/project/$PROJECT/$VERSION/aptsources
  APT_SOURCES_ORIG=`curl -n -f -s --retry 10 $SOURCESURL$param`
  if [ -z "$APT_SOURCES_ORIG" ]; then
    log_error "Error downloading $SOURCESURL"
  fi

  echo "$APT_SOURCES_ORIG" > $target/etc/apt/sources.list

  if [ -n "$UPGRADE_APT_SOURCES_EXTRA" ]; then
      log "adding new extra APT sources"
      echo "$UPGRADE_APT_SOURCES_EXTRA" > $target/etc/apt/sources.list.d/extra.list
  fi

  if [ -n "$UPGRADE_APT_KEYS_EXTRA" ]; then
      APT_KEYS_EXTRA=$UPGRADE_APT_KEYS_EXTRA
      log "downloading new extra APT keys"

      # FIXME: use function everywhere
      i=0
      for url in $KEY_URL $APT_KEYS_EXTRA
      do
        if [ -z "$url" ]; then
          continue
        fi
        if [ $i -ne 0 ]; then
          postfix=".$i"
        else
          postfix=""
        fi
        i=$((i + 1))
        curl -n -s --retry 10 -o $WORK_DIR/repo.asc$postfix $url
        exit_on_error "Error downloading $url"
      done

      for key in $WORK_DIR/repo.asc*
      do
        chroot $target apt-key add - >/dev/null < $key
        exit_on_error "Error adding apt key"
      done
  fi

  log "updating APT database"
  chroot $target apt-get update >&2
  exit_on_error "Error updating APT database"

  log "upgrading from $UPGRADE_BASE to $UPGRADE_VERSION"
  chroot $target apt-get clean >&2
  DEBIAN_FRONTEND=noninteractive chroot $target apt-get -y -f -o Dpkg::Options::="--force-confdef" dist-upgrade 2>&1 | tee $WORK_DIR/upgrade.log >&2
  if [ $? -ne 0 ]; then
    log_error "Error upgrading from $UPGRADE_BASE to $UPGRADE_VERSION"
  fi

  if grep -q "^dpkg: error processing " $WORK_DIR/upgrade.log; then
      log_error "Error upgrading from $UPGRADE_BASE to $UPGRADE_VERSION"
  fi

  DEBIAN_FRONTEND=noninteractive chroot $target apt-get -qy autoremove --purge >&2
  # TODO: check if "0 not upgraded" in upgrade.log

  if grep -q "^dpkg: error processing " $WORK_DIR/upgrade.log; then
      log_error "Error upgrading from $UPGRADE_BASE to $UPGRADE_VERSION"
  fi

  if [ -n "$UPGRADE_EXTRA_PACKAGES" ]; then
      DEBIAN_FRONTEND=noninteractive chroot $target apt-get install -y --download-only $UPGRADE_EXTRA_PACKAGES 2>&1 | tee -a $WORK_DIR/upgrade.log >&2
      ret=$?
  fi

  grep "^Get:" $WORK_DIR/upgrade.log | cut -d ' ' -f 2,5 | sed 's#.*/\(.\+/.\+\) \(.\+\)#\1 \2#' | sort > $WORK_DIR/dpkgs.list
  log "copying `wc -l < $WORK_DIR/dpkgs.list` debian packages to APT repository"
  while read line
  do
    path=`echo $line | cut -d ' ' -f 1`;
    pkg=`echo $line | cut -d ' ' -f 2`;
    mkdir -p $WORK_DIR/debian/pool/$path
    mv $target/var/cache/apt/archives/${pkg}_*.deb $WORK_DIR/debian/pool/$path/
  done < $WORK_DIR/dpkgs.list
  rm -f $WORK_DIR/dpkgs.list

  if type post_upgrade_deployment >/dev/null; then
    post_upgrade_deployment
  fi
}

postinst_docker_upgrade()
{
    if [ -z "$DOCKER_COMPOSE_FILE" ]; then
      return
    fi

    if [ ! -f $WORK_DIR/upgrade-package/docker-containers.old.tar -a -f $WORK_DIR/upgrade-package/docker.old -a -f $WORK_DIR/upgrade-package/docker.nodedup ]; then
        # first pass, save the previous docker images
        dockers=`comm -23 $WORK_DIR/upgrade-package/docker.old $WORK_DIR/upgrade-package/docker.nodedup`
        rm -f $WORK_DIR/upgrade-package/docker.nodedup
        if [ -n "$dockers" ]; then
            chroot $target docker save $dockers > $WORK_DIR/upgrade-package/docker-containers.old.tar
        fi
    else
        # second pass, save the changed docker images
        newimages=`grep -v -P '^[ \t]*#' $target/$DOCKER_COMPOSE_FILE | grep "image:" | awk '{ print $2 }' | sort | uniq`
        if [ -f $target/$DOCKER_COMPOSE_ENV_PATH/.env ]; then
            newimages=`. $target/$DOCKER_COMPOSE_ENV_PATH/.env; for i in $newimages; do eval echo $i; done`
        fi

        if [ -f $WORK_DIR/upgrade-package/docker-containers.old.tar ]; then
            echo "$newimages" > $WORK_DIR/upgrade-package/docker.new
            docker_containers=`comm -23 $WORK_DIR/upgrade-package/docker.new $WORK_DIR/upgrade-package/docker.old`
            if [ -n "$docker_containers" ]; then
              log "deduplicating docker images"
              chroot $target docker save $docker_containers > $WORK_DIR/upgrade-package/docker-containers.tar
              exit_on_error "Error saving docker containers"
              . /usr/lib/molior-deploy/docker-utils.sh.inc
              docker_deduplicate $WORK_DIR/upgrade-package/docker-containers.old.tar \
                                 $WORK_DIR/upgrade-package/docker-containers.tar \
                                 $WORK_DIR/upgrade-package/docker-containers.dedup.tar
              exit_on_error "Error deduplicating docker containers"
              rm -f $WORK_DIR/upgrade-package/docker-containers.tar $WORK_DIR/upgrade-package/docker-containers.old.tar
              chroot $target docker image prune -a -f >&2
            else
              log "docker: no image changes in docker-compose.yml"
              rm -f $WORK_DIR/upgrade-package/docker-containers.old.tar
            fi
        else
            log "saving docker containers"
            chroot $target docker save $newimages > $WORK_DIR/upgrade-package/docker-containers.tar
            exit_on_error "Error saving docker containers"
        fi
    fi
}

finalize_deployment_upgrade()
{
  deployment=$(get_deployment_filename "tar")
  architectures="$ARCH $DPKG_ADD_ARCH"
  for arch in $architectures; do
    log "creating Packages and Release files for $arch"
    mkdir -p $WORK_DIR/debian/dists/$PROJECT/$VERSION/stable/binary-$arch
    cd $WORK_DIR/debian
    apt-ftparchive --arch $arch packages pool/ > dists/$PROJECT/$VERSION/stable/binary-$arch/Packages
    cd - >/dev/null
    cd $WORK_DIR
    apt-ftparchive release debian/dists/$PROJECT/$VERSION/stable/binary-$arch/ > debian/dists/$PROJECT/$VERSION/stable/binary-$arch/Release
  done
  apt-ftparchive -o APT::FTPArchive::Release::Origin="$PROJECT/$VERSION" \
                 -o APT::FTPArchive::Release::Label="$PROJECT/$VERSION" \
                 -o APT::FTPArchive::Release::Suite="$SUITE" \
                 -o APT::FTPArchive::Release::Version="$VERSION" \
                 -o APT::FTPArchive::Release::Codename="$PROJECT/$VERSION" \
                 -o APT::FTPArchive::Release::Architectures="$architectures" \
                 -o APT::FTPArchive::Release::Components="stable" \
                 release \
                 debian/dists/$PROJECT/$VERSION/ \
                 > debian/dists/$PROJECT/$VERSION/Release
  echo "deb [trusted=yes] file:@REPO_PATH@/debian $PROJECT/$VERSION stable" > debian/apt_sources_${PROJECT}_$VERSION.list
  cat > debian/README.md <<EOF
Configure APT sources
======================

Run the following command to configure the APT sources (from the directory where the archive is extracted):

sed s#@REPO_PATH@#\$PWD# debian/apt_sources_${PROJECT}_$VERSION.list | sudo tee /etc/apt/sources.list.d/${PROJECT}_$VERSION.list

Update APT database
====================

sudo apt-get update

Upgrade the system
===================

sudo apt-get -y dist-upgrade
sudo apt-get -y autoremove --purge
sudo apt-get clean

Restart the system
===================

Depending on the upgraded or newly installed packages, a system restart may be required:

sudo reboot

EOF
  mv $WORK_DIR/upgrade.log $WORK_DIR/debian/
  cd - >/dev/null

  log "creating APT repository archive"

  mv $WORK_DIR/debian $WORK_DIR/upgrade-package/

  if [ -n "$UPGRADE_EXTRA_DIR" ]; then
    cp -ar $SOURCE_DIR/$UPGRADE_EXTRA_DIR/* $WORK_DIR/upgrade-package/
    exit_on_error "Error copying $WORK_DIR/$PROJECT/$UPGRADE_EXTRA_DIR/* to upgrade-package"
  fi

  # set new project version
  echo "$PROJECT/$VERSION" > $WORK_DIR/upgrade-package/projectversion

  log "creating checksum file"
  cd $WORK_DIR/upgrade-package
  echo "UPGRADE_DURATION=$UPGRADE_DURATION" >> upgrade.info
  echo "UPGRADE_MINFREE=$UPGRADE_MINFREE" >> upgrade.info
  find -type f -exec stat -c "%n %s" {} \; | LC_ALL=C sort > ../file.list
  find . -type f | xargs sha256sum > $WORK_DIR/sha256.sums
  exit_on_error "Error generating checksum file"
  mv -f $WORK_DIR/sha256.sums .
  mv -f ../file.list .
  cd - >/dev/null

  # hook for signing, ...
  if type prepack_upgrade >/dev/null; then
    prepack_upgrade
  fi

  cd $WORK_DIR/upgrade-package
  tar -cf $WORK_DIR/$deployment *
  cd - >/dev/null
}
