# molior-deploy plugin
# vim: syntax=sh

INITRDINST=/usr/lib/molior-deploy/initrd-installer

preinit_deployment_installer()
{
  REQUIRED_HOST_PACKAGES="isolinux syslinux-utils genisoimage xorriso mtools"
}

init_deployment_installer()
{
  do_fstab=0
  init_deployment_dir
}

preinst_deployment_installer()
{
  APT_INSTALL_EXTRA="$APT_INSTALL_EXTRA cpio"
  cp -ar $target $WORK_DIR/instroot
}

finalize_deployment_installer()
{
  umount_bootstrap

  mkdir -p $WORK_DIR/iso
  echo " * creating installer initrd"

  KERNEL_ARCH="$ARCH"
  if [ "$ARCH" = "i386" ]; then
    # The kernel architecture of i386 (32 bit) kernels is called 686
    KERNEL_ARCH="686"
  fi

  if [ "$INSTALLER_BOOTTYPE" = "efi" ]; then
    INSTALLER_EXTRA_PACKAGES="$INSTALLER_EXTRA_PACKAGES grub-efi-$ARCH-bin dosfstools"
    if [ "$ARCH" = "amd64" ]; then
      EFIFILE=bootx64.efi
      GRUBEFITYPE=x86_64-efi
    elif [ "$ARCH" = "arm64" ]; then
      EFIFILE=grubaa64.efi
      GRUBEFITYPE=arm64-efi
    else
      log_error "boottype EFI not supported on $ARCH"
    fi
  fi

  if [ "$fs_has_lvm" -eq 1 ]; then
    INSTALLER_EXTRA_PACKAGES="$INSTALLER_EXTRA_PACKAGES lvm2"
  fi
  if [ "$fs_has_luks" -eq 1 ]; then
    INSTALLER_EXTRA_PACKAGES="$INSTALLER_EXTRA_PACKAGES cryptsetup"
  fi
  chroot $WORK_DIR/instroot apt-get install --no-install-recommends --yes \
    $INSTALLER_EXTRA_PACKAGES \
    linux-image-$KERNEL_ARCH \
    busybox \
    initramfs-tools \
    isolinux \
    syslinux-common \
    xz-utils \
    pv \
    util-linux \
    >&2
  chroot $WORK_DIR/instroot apt-get clean >&2
  initrd=$WORK_DIR/instroot/etc/initramfs-tools
  rm -rf $initrd
  cp -ar $INITRDINST $initrd
  if [ -d "$SOURCE_DIR/$INSTALLER_EXTRA_INITRD" ]; then
    cp -ar $SOURCE_DIR/$INSTALLER_EXTRA_INITRD/* $initrd
  fi

  get_deploy_config >> $initrd/scripts/install.conf

  cp /usr/lib/molior-deploy/molior-deploy.sh.inc $initrd/scripts/

  if [ "$fs_has_luks" -eq 1 ]; then
    # FIXME: use manual_add_modules in hooks file ?
    echo "copy_exec /sbin/cryptsetup /sbin" >> $initrd/hooks/installer
    echo dm_crypt >> $initrd/modules
  fi

  if [ "$INSTALLER_BOOTTYPE" = "efi" ]; then
    cat >$initrd/hooks/mkfs.vfat <<EOF
#!/bin/bash

case \$1 in
prereqs)
        prereqs
        exit 0
        ;;
esac

. /usr/share/initramfs-tools/hook-functions

manual_add_modules efivars
copy_exec      /sbin/mkfs.fat  /sbin/
copy_file link /sbin/mkfs.vfat /sbin/
EOF
    chmod +x $initrd/hooks/mkfs.vfat
  fi

  initrd=`readlink $WORK_DIR/instroot/initrd.img | xargs basename`
  chroot $WORK_DIR/instroot update-initramfs -u >/dev/null
  if [ $? -ne 0 ]; then
    log_error "Error updating installer initrd"
  fi

  if [ "$INSTALLER_BOOTTYPE" = "efi" ]; then
    mkdir -p $WORK_DIR/iso/boot/grub/$GRUBEFITYPE/
    cp $WORK_DIR/instroot/usr/lib/grub/$GRUBEFITYPE/* $WORK_DIR/iso/boot/grub/$GRUBEFITYPE/
    cat >$WORK_DIR/iso/boot/grub/grub.cfg <<EOF
search --file --set=root /image.cpio.xz
insmod all_video
linux /vmlinuz quiet
initrd /initrd.img
boot
EOF
    chroot $WORK_DIR/instroot grub-mkimage -O $GRUBEFITYPE -p /boot/grub -o /boot/$EFIFILE \
                                           part_msdos part_gpt fat iso9660 search
    if [ $? -ne 0 ]; then
      log_error "Error creating grub image"
    fi
    mkdir -p $WORK_DIR/iso/efi/boot/
    cp $WORK_DIR/instroot/boot/$EFIFILE $WORK_DIR/iso/efi/boot/

    if [ "$ARCH" = "arm64" ]; then
      mkdir $WORK_DIR/debian-installer
      cd $WORK_DIR/debian-installer
      wget -q $MIRROR/dists/$SUITE/main/installer-arm64/current/images/cdrom/debian-cd_info.tar.gz
      if [ $? -ne 0 ]; then
        log_error "Error downloading $MIRROR/dists/$SUITE/main/installer-arm64/current/images/cdrom/debian-cd_info.tar.gz"
      fi
      tar xf debian-cd_info.tar.gz ./grub/efi.img
      if [ $? -ne 0 ]; then
        log_error "Error grub/efi.img not found in debian-cd_info.tar.gz"
      fi
      mcopy -i grub/efi.img ::efi/boot/bootaa64.efi $WORK_DIR/iso/efi/boot/bootaa64.efi
      if [ $? -ne 0 ]; then
        log_error "Error copying bootaa64.efi"
      fi
      cd - >/dev/null

      # copyed from debian-cd installer
      blocks=2048
      rm -f $WORK_DIR/iso/boot/grub/efi.img
      mkfs.msdos -v -C "$WORK_DIR/iso/boot/grub/efi.img" $blocks >/dev/null
      mmd -i "$WORK_DIR/iso/boot/grub/efi.img" ::efi
      mmd -i "$WORK_DIR/iso/boot/grub/efi.img" ::efi/boot
      mcopy -o -i "$WORK_DIR/iso/boot/grub/efi.img" $WORK_DIR/iso/efi/boot/*.efi "::efi/boot"
      if [ $? -ne 0 ]; then
        log_error "Error copying efi/boot/*.efi"
      fi
      # for stretch
      cp $WORK_DIR/iso/boot/grub/grub.cfg $WORK_DIR/iso/boot/grub/arm64-efi/
      mkdir $WORK_DIR/iso/.disk
      touch $WORK_DIR/iso/.disk/info
    else # not arm64
      cp $WORK_DIR/instroot/usr/lib/ISOLINUX/isolinux.bin $WORK_DIR/iso/
    fi
  else # not EFI
    cp $WORK_DIR/instroot/usr/lib/ISOLINUX/isolinux.bin $WORK_DIR/iso/
    cp $WORK_DIR/instroot/usr/lib/syslinux/modules/bios/menu.c32 $WORK_DIR/iso/
    cp $WORK_DIR/instroot/usr/lib/syslinux/modules/bios/ldlinux.c32 $WORK_DIR/iso/
    cp $INITRDINST/syslinux.cfg $WORK_DIR/iso/
  fi
  cp $WORK_DIR/instroot/boot/$initrd $WORK_DIR/iso/initrd.img
  cp -L $WORK_DIR/instroot/vmlinuz $WORK_DIR/iso/
  cat >$WORK_DIR/iso/README.md <<EOF
=Molior Installer for ${PROJECT}_${REVISION} `date -R`=

==APT sources==
$APT_SOURCES

==Installed Packages (`echo \"$INSTALLED_PACKAGES\" | wc -l`)==
$INSTALLED_PACKAGES
EOF

  echo " * creating image.cpio.xz"
  cd $target
  find . -xdev -depth -print | cpio --quiet -o -H newc -B > $WORK_DIR/iso/image.cpio
  if [ $? -ne 0 ]; then
    log_error "Error creating $WORK_DIR/iso/image.cpio"
  fi
  cd - >/dev/null
  $PXZ_CMD -T `nproc --ignore 1` $WORK_DIR/iso/image.cpio 2>&1
  if [ $? -ne 0 ]; then
    log_error "Error compressing $WORK_DIR/iso/image.cpio"
  fi

  deployment=${PROJECT}_${VERSION}_${REVISION}_$VARIANT.iso
  echo " * creating $deployment"
  rm -f $deployment
  VOLID=`printf "%.32s" "MLR:${PROJECT}"`
  if [ "$ARCH" = "amd64" ]; then
    eval genisoimage -quiet -o $deployment \
      -b isolinux.bin \
      -c boot.cat \
      -l -V $VOLID \
      -A "${PROJECT}_${REVISION}" \
      -input-charset utf8 \
      --relaxed-filenames \
      -allow-multidot \
      -no-emul-boot \
      -boot-load-size 4 \
      -boot-info-table \
      $INSTALLER_EXTRA_GENISOIMAGE_OPTIONS \
      $WORK_DIR/iso/
    if [ $? -ne 0 ]; then
      log_error "Error running genisoimage"
    fi
    isohybrid $deployment

  elif [ "$ARCH" = "arm64" ]; then
    xorriso -as mkisofs -quiet -o $deployment \
      -J -joliet-long -cache-inodes -l \
      -e boot/grub/efi.img -no-emul-boot \
      -append_partition 2 0xef $WORK_DIR/iso/boot/grub/efi.img \
      -partition_cyl_align all \
      -V $VOLID \
      -A "${PROJECT}_${REVISION}" \
      -r $WORK_DIR/iso/
    if [ $? -ne 0 ]; then
      log_error "Error running xorriso"
    fi
  fi
  if [ -n "$SUDO_UID" -a -n "$SUDO_GID" ]; then
    chown $SUDO_UID:$SUDO_GID $deployment
  fi
}

