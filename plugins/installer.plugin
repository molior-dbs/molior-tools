# molior-deploy plugin
# vim: syntax=sh

INITRDINST=/usr/lib/molior-deploy/initrd-installer

create_efi_image()
{
  mkfs.msdos -v -C "$WORK_DIR/efi.img" 4096 >/dev/null
  mmd -i "$WORK_DIR/efi.img" ::efi
  mmd -i "$WORK_DIR/efi.img" ::efi/boot
  mmd -i "$WORK_DIR/efi.img" ::boot
  mmd -i "$WORK_DIR/efi.img" ::boot/grub
  exit_on_error "Error copying efi files to boot image"
  mcopy -o -i "$WORK_DIR/efi.img" $WORK_DIR/out/EFI/BOOT/$EFIFILE "::efi/boot"
  exit_on_error "Error copying efi files to boot image"
  mcopy -s -o -i "$WORK_DIR/efi.img" $WORK_DIR/out/boot/grub/* "::boot/grub"
  exit_on_error "Error copying efi files to boot image"
}

preinit_deployment_installer()
{
  REQUIRED_HOST_COMMANDS="isohybrid genisoimage xorriso mcopy mmd"
  REQUIRED_PACKAGES="genisoimage xorriso syslinux-utils mtools dosfstools"
  if [ "$TARGET_BOOTTYPE" = "efi" ]; then
    REQUIRED_HOST_COMMANDS="$REQUIRED_HOST_COMMANDS mkfs.msdos"
  fi
  # FIXME: check /usr/lib/ISOLINUX/isolinux.bin
#
  if [ -z "$TARGET_BOOTTYPE" -a -n "$INSTALLER_BOOTTYPE" ]; then
    TARGET_BOOTTYPE=$INSTALLER_BOOTTYPE
  fi
}

init_deployment_installer()
{
  do_fstab=0
  do_compress=0
  init_deployment_dir
}

preinst_deployment_installer()
{
  APT_INSTALL_EXTRA="$APT_INSTALL_EXTRA cpio tar"
  cp -ar $target $WORK_DIR/instroot
  if [ ! -e $WORK_DIR/instroot/etc/resolv.conf ]; then
    cp -L /etc/resolv.conf $WORK_DIR/instroot/etc/resolv.conf
  fi
  if [ -z "$INSTALLER_LINUX_CMDLINE" ]; then
    INSTALLER_LINUX_CMDLINE="quiet"
  fi
}

prepare_initrd_deployment()
{
  umount_bootstrap

  mkdir -p $WORK_DIR/out

  if [ -z "$INSTALLER_ARCHIVE_TYPE" ]; then
      INSTALLER_ARCHIVE_TYPE="cpio"
  fi

  case $INSTALLER_ARCHIVE_TYPE in
      cpio)
        INSTALLER_ARCHIVE_EXT=".cpio"
      ;;
      tar)
        INSTALLER_ARCHIVE_EXT=".tar"
      ;;
      *)
        log_error "Archive format '$INSTALLER_ARCHIVE_TYPE' not supported"
      ;;
  esac

  if [ -z "$INSTALLER_COMPRESSION" ]; then
      INSTALLER_COMPRESSION="xz"
  fi

  case $INSTALLER_COMPRESSION in
      none)
        INSTALLER_COMPRESSION_EXT=""
      ;;
      xz)
        INSTALLER_COMPRESSION_EXT=".xz"
      ;;
      gz|gzip)
        INSTALLER_COMPRESSION_EXT=".gz"
      ;;
      *)
        log_error "Compression '$INSTALLER_COMPRESSION' not supported"
      ;;
  esac

  log "creating installer initrd"

  KERNEL_ARCH="$ARCH"
  if [ "$ARCH" = "i386" ]; then
    # The kernel architecture of i386 (32 bit) kernels is called 686
    KERNEL_ARCH="686"
  fi

  if [ -z "$LINUX_IMAGE_NAME" ]; then
    LINUX_IMAGE_NAME="linux-image-$KERNEL_ARCH"
  fi

  if [ "$TARGET_BOOTTYPE" = "efi" ]; then
    INSTALLER_EXTRA_PACKAGES="$INSTALLER_EXTRA_PACKAGES grub-efi-$ARCH-bin dosfstools"
    if [ "$ARCH" = "amd64" ]; then
      EFIFILE=bootx64.efi
      GRUBEFITYPE=x86_64-efi
    elif [ "$ARCH" = "arm64" ]; then
      EFIFILE=bootaa64.efi
      GRUBEFITYPE=arm64-efi
    else
      log_error "boottype EFI not supported on $ARCH"
    fi
  fi

  # bullseye does not have fdisk installed per default
  if [ -n "$SFDISK" -a "$SUITE" != "stretch" -a "$SUITE" != "buster" ]; then
    INSTALLER_EXTRA_PACKAGES="$INSTALLER_EXTRA_PACKAGES fdisk"
  fi
  if [ "$fs_has_lvm" -eq 1 ]; then
    INSTALLER_EXTRA_PACKAGES="$INSTALLER_EXTRA_PACKAGES lvm2"
  fi
  if [ "$fs_has_luks" -eq 1 ]; then
    INSTALLER_EXTRA_PACKAGES="$INSTALLER_EXTRA_PACKAGES cryptsetup"
  fi
  if [ "$fs_on_raid" -eq 1 ]; then
    INSTALLER_EXTRA_PACKAGES="$INSTALLER_EXTRA_PACKAGES mdadm"
  fi
  if [ "$fs_has_btrfs" -eq 1 ]; then
    INSTALLER_EXTRA_PACKAGES="$INSTALLER_EXTRA_PACKAGES btrfs-progs"
  fi

  if [ ! -d $WORK_DIR/instroot ]; then
    # in case of using a base roots, there is no instroot debootstrap left,
    # copy full rootfs for creating the initrd
    cp -ar $target $WORK_DIR/instroot
    chroot $WORK_DIR/instroot apt-get update >&2
  fi

  if [ "$fs_has_btrfs" -eq 1 ]; then
    echo "copy_exec /sbin/mkfs.btrfs /sbin" >> $initrd/hooks/installer
    echo btrfs >> $initrd/modules
  fi

  DEBIAN_FRONTEND=noninteractive chroot $WORK_DIR/instroot apt-get install --no-install-recommends --yes \
    $INSTALLER_EXTRA_PACKAGES $LINUX_IMAGE_NAME \
    busybox initramfs-tools isolinux syslinux-common \
    xz-utils pv util-linux eject >&2
  exit_on_error "Error installing initrd packages"

  chroot $WORK_DIR/instroot apt-get clean >&2

  initrd=$WORK_DIR/instroot/etc/initramfs-tools
  rm -rf $initrd
  cp -ar $INITRDINST $initrd
  if [ -n "$INSTALLER_EXTRA_INITRD" ]; then
    if [ -d "$SOURCE_DIR/$INSTALLER_EXTRA_INITRD" ]; then
      cp -Lr $SOURCE_DIR/$INSTALLER_EXTRA_INITRD/* $initrd/
    fi
  fi

  get_deploy_config >> $initrd/scripts/install.conf
  cp /usr/lib/molior-deploy/molior-deploy.sh.inc $initrd/scripts/

  if [ "$fs_has_luks" -eq 1 ]; then
    # FIXME: use manual_add_modules in hooks file ?
    echo "copy_exec /sbin/cryptsetup /sbin" >> $initrd/hooks/installer
    echo dm_crypt >> $initrd/modules
  fi

  if [ -n "$INSTALLER_EXTRA_MODULES" ]; then
    cat > $initrd/hooks/installer-extra-modules <<'EOF'
#!/bin/sh

PREREQ=""

# Output pre-requisites
prereqs()
{
  echo "$PREREQ"
}

case "$1" in
  prereqs)
    prereqs
    exit 0
    ;;
esac

. /usr/share/initramfs-tools/hook-functions

EOF
    for mod in $INSTALLER_EXTRA_MODULES
    do
        echo "manual_add_modules $mod" >> $initrd/hooks/installer-extra-modules
    done
    chmod +x $initrd/hooks/installer-extra-modules
  fi

  if [ "$TARGET_BOOTTYPE" = "efi" ]; then
    cat > $initrd/hooks/mkfs.vfat <<'EOF'
#!/bin/sh

PREREQ=""

# Output pre-requisites
prereqs()
{
  echo "$PREREQ"
}

case "$1" in
  prereqs)
    prereqs
    exit 0
    ;;
esac

. /usr/share/initramfs-tools/hook-functions

manual_add_modules efivars
copy_exec      /sbin/mkfs.fat  /sbin/
copy_file link /sbin/mkfs.vfat /sbin/
EOF
    chmod +x $initrd/hooks/mkfs.vfat
  fi

  chroot $WORK_DIR/instroot update-initramfs -u >/dev/null
  exit_on_error "Error updating installer initrd"

  if [ "$TARGET_BOOTTYPE" = "efi" ]; then
    mkdir -p $WORK_DIR/out/boot/grub/$GRUBEFITYPE/
    cp $WORK_DIR/instroot/usr/lib/grub/$GRUBEFITYPE/*.mod $WORK_DIR/instroot/usr/lib/grub/$GRUBEFITYPE/*.lst $WORK_DIR/out/boot/grub/$GRUBEFITYPE/
    cat >$WORK_DIR/out/boot/grub/grub.cfg <<EOF
search --file --set=root /image$INSTALLER_ARCHIVE_EXT$INSTALLER_COMPRESSION_EXT
insmod all_video
set gfxpayload=keep
set linux_gfx_mode=1024x768x32
linux /vmlinuz $INSTALLER_LINUX_CMDLINE
initrd /initrd.img
boot
EOF
    if echo $ARCH | grep -q arm; then
      video_mod=""
    else
      video_mod="efi_uga"
    fi
    chroot $WORK_DIR/instroot grub-mkimage -O $GRUBEFITYPE -p /boot/grub -o /boot/$EFIFILE \
                                            boot linux search normal configfile \
                                            part_gpt btrfs fat iso9660 loopback \
                                            test keystatus gfxmenu regexp probe \
                                            efi_gop $video_mod all_video gfxterm font \
                                            read ls cat png jpeg halt reboot echo sleep
    exit_on_error "Error creating grub image"
    mkdir -p $WORK_DIR/out/EFI/BOOT
    mv $WORK_DIR/instroot/boot/$EFIFILE $WORK_DIR/out/EFI/BOOT/

    create_efi_image
    cp $WORK_DIR/efi.img $WORK_DIR/out/

    if [ "$ARCH" = "arm64" ]; then
      # for stretch
      cp $WORK_DIR/out/boot/grub/grub.cfg $WORK_DIR/out/boot/grub/arm64-efi/
      mkdir $WORK_DIR/out/.disk
      touch $WORK_DIR/out/.disk/info
    else # not arm64
      cp $WORK_DIR/instroot/usr/lib/ISOLINUX/isohdpfx.bin $WORK_DIR/out/
      cp $WORK_DIR/instroot/usr/lib/ISOLINUX/isolinux.bin $WORK_DIR/out/
    fi

  elif [ "$INSTALLER_USE_PXE" != "yes" ]; then # not EFI and not PXE (= ISO)
    cp $WORK_DIR/instroot/usr/lib/ISOLINUX/isolinux.bin $WORK_DIR/out/
    cp $WORK_DIR/instroot/usr/lib/syslinux/modules/bios/menu.c32 $WORK_DIR/out/
    cp $WORK_DIR/instroot/usr/lib/syslinux/modules/bios/ldlinux.c32 $WORK_DIR/out/
    cp $INITRDINST/syslinux.cfg $WORK_DIR/out/
  fi

  kernel_version=$(chroot $WORK_DIR/instroot/ dpkg-query -W -f='${binary:Package}\n' linux-image-* | head -n 1 | sed 's/linux-image-//')

  cp -L $WORK_DIR/instroot/boot/initrd.img-$kernel_version $WORK_DIR/out/initrd.img
  cp -L $WORK_DIR/instroot/boot/vmlinuz-$kernel_version $WORK_DIR/out/vmlinuz

  cat >$WORK_DIR/out/README.md <<EOF
= Molior Installer for ${PROJECT}_${REVISION} `date -R` =

== APT sources ==
$APT_SOURCES
EOF

  if [ -f $WORK_DIR/packages.txt ]; then
    cat >>$WORK_DIR/out/README.md <<EOF
== Installed Packages (`wc -l $WORK_DIR/packages.txt`) ==
`cat $WORK_DIR/packages.txt`
EOF
  fi

  log "creating image$INSTALLER_ARCHIVE_EXT$INSTALLER_COMPRESSION_EXT"
  cd $target

  case $INSTALLER_ARCHIVE_TYPE in
     cpio)
       find . -xdev -depth -print | cpio --quiet -o -H newc -B > $WORK_DIR/out/image.cpio
       exit_on_error "Error creating $WORK_DIR/out/image.cpio"
     ;;
     tar)
        find . -xdev -depth -print | tar -c --posix --xattrs --xattrs-include='*.*' --no-recursion -S -f $WORK_DIR/out/image.tar -T -
        exit_on_error "Error creating $WORK_DIR/out/image.tar"
     ;;
  esac

  cd - >/dev/null

  case $INSTALLER_COMPRESSION in
      none)
      ;;
      xz)
        $PXZ_CMD -T `nproc --ignore 1` $WORK_DIR/out/image$INSTALLER_ARCHIVE_EXT 2>&1
        exit_on_error "Error compressing $WORK_DIR/out/image$INSTALLER_ARCHIVE_EXT$INSTALLER_COMPRESSION_EXT"
      ;;
      gz|gzip)
        gzip $WORK_DIR/out/image$INSTALLER_ARCHIVE_EXT 2>&1
        exit_on_error "Error compressing $WORK_DIR/out/image$INSTALLER_ARCHIVE_EXT$INSTALLER_COMPRESSION_EXT"
      ;;
  esac
}

finalize_deployment_installer()
{
  prepare_initrd_deployment

  deployment=$(get_deployment_filename "iso")
  log "creating $deployment"
  rm -f $deployment
  VOLID=`printf "%.32s" "MLR:${PROJECT}"`
  if [ "$ARCH" = "amd64" -o "$ARCH" = "i386" ]; then
    if [ "$TARGET_BOOTTYPE" = "efi" ]; then
      xorriso -compliance iso_9660_level=3 \
        -as mkisofs -quiet -o $WORK_DIR/$deployment \
        -r -V $VOLID \
        -J -joliet-long -cache-inodes \
        -isohybrid-mbr  $WORK_DIR/out/isohdpfx.bin \
        -b isolinux.bin \
        -c boot.cat \
        -boot-load-size 4 -boot-info-table -no-emul-boot \
        -eltorito-alt-boot \
        -e efi.img \
        -no-emul-boot -isohybrid-gpt-basdat -isohybrid-apm-hfsplus \
        $WORK_DIR/out/
      exit_on_error "Error running xorriso"
    else
      eval genisoimage -quiet -o $WORK_DIR/$deployment \
        -b isolinux.bin \
        -c boot.cat \
        -l -V $VOLID \
        -A "${PROJECT}_${REVISION}" \
        -input-charset utf8 \
        --relaxed-filenames \
        -allow-multidot \
        -no-emul-boot \
        -boot-load-size 4 \
        -boot-info-table \
        $INSTALLER_EXTRA_GENISOIMAGE_OPTIONS \
        $WORK_DIR/out/
      exit_on_error "Error running genisoimage"

      isohybrid $WORK_DIR/$deployment
      exit_on_error "Error running isohybrid"
    fi

  elif [ "$ARCH" = "arm64" ]; then
    xorriso -compliance iso_9660_level=3 \
      -as mkisofs -quiet -o $WORK_DIR/$deployment \
      -J -joliet-long -cache-inodes -l \
      -e efi.img -no-emul-boot \
      -append_partition 2 0xef $WORK_DIR/out/efi.img \
      -partition_cyl_align all \
      -V $VOLID \
      -A "${PROJECT}_${REVISION}" \
      -r $WORK_DIR/out/
    exit_on_error "Error running xorriso"
  fi
}
